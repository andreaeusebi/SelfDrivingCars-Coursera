from numpy import *
import math 

def sph_to_cart(epsilon, alpha, r):
  """
  Transform sensor readings to Cartesian coordinates in the sensor
  frame. The values of epsilon and alpha are given in radians, while 
  r is in metres. Epsilon is the elevation angle and alpha is the
  azimuth angle (i.e., in the x,y plane).
  """
  p = zeros(3)  # Position vector 
  
  # Your code here

  p[0] = r * math.cos(alpha) * math.cos(epsilon)
  p[1] = r * math.sin(alpha) * math.cos(epsilon)
  p[2] = r * math.sin(epsilon)

  return p
  
def estimate_params(P):
  """
  Estimate parameters from sensor readings in the Cartesian frame.
  Each row in the P matrix contains a single 3D point measurement;
  the matrix P has size n x 3 (for n points). The format is:
  
  P = [[x1, y1, z1],
       [x2, x2, z2], ...]
       
  where all coordinate values are in metres. Three parameters are
  required to fit the plane, a, b, and c, according to the equation
  
  z = a + bx + cy
  
  The function should retrn the parameters as a NumPy array of size
  three, in the order [a, b, c].
  """
  param_est = zeros(3)
  print(param_est)
  
  # Your code here
  P_rows, P_columns = P.shape
  A = ones_like(P)

  A[:,1] = P[:,0]
  A[:,2] = P[:,1]
  
  print(A)

  b = zeros((P_rows,1))
  b = P[:,2]
  
  print(b)

  param_est = linalg.inv(A.T @ A) @ A.T @ b

  print('test')
  
  return param_est
